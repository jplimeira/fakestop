# ---------------------- IMPORTA√á√ïES ----------------------
import os
import sqlite3
from crewai import Agent, Task, Process, Crew, LLM
from dotenv import load_dotenv
from datetime import datetime

# ---------------------- BANCO DE DADOS ----------------------
# Conecta ou cria o banco de dados SQLite
conn = sqlite3.connect("fakestop.db")
cursor = conn.cursor()

# Cria a tabela se n√£o existir
cursor.execute('''
CREATE TABLE IF NOT EXISTS analises (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    noticia TEXT,
    fontes TEXT,
    analise_linguistica TEXT,
    verificacao_fatos TEXT,
    classificacao_final TEXT,
    data_analise TEXT
)
''')
conn.commit()
conn.close()

# ---------------------- CONFIGURA√á√ÉO DE AMBIENTE E MODELO ----------------------
# Carrega vari√°veis do .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Inicializa o modelo LLM
llm = LLM(model='gpt-4o-mini', api_key=OPENAI_API_KEY)

# ---------------------- ENTRADA DO USU√ÅRIO ----------------------
# Recebe a not√≠cia do usu√°rio
noticia = input("Informe a not√≠cia que deseja verificar: ")
if not noticia.strip():
    raise ValueError("Voc√™ deve informar uma not√≠cia para verificar.")

# ---------------------- AGENTE 1: COLETOR DE FONTES ----------------------
# Define o agente coletor de fontes confi√°veis
agente_coletor = Agent(
    role='Jornalista investigativo',
    goal='''Voc√™ √© um jornalista investigativo e precisa pesquisar fontes confi√°veis para coletar 
    infoma√ß√µes sobre a tem√°tica {noticia} em sites como o https://g1.globo.com, https://bbc.com, 
    https://toolbox.google.com/factcheck/explorer/search/list:recent;hl=pt.''',
    verbose=True,
    memory=True,
    llm=llm,
    backstory='Voc√™ √© um jornalista investigativo experiente sobre pesquisar not√≠cias tipo {noticia}'
)

# Define a tarefa do agente coletor
tarefa_coletar = Task(
    description="Pesquisa de fontes confi√°veis para coletar informa√ß√µes  {noticia}.",
    expected_output="Relat√≥rio de fontes coletadas com data, links e resumos.",
    agent=agente_coletor,
    output_file="coleta_de_fontes.md"
)

# ---------------------- AGENTE 2: LINGU√çSTICO ----------------------
# Define o agente respons√°vel pela an√°lise lingu√≠stica
agente_linguistico = Agent(
    role='Agente lingu√≠stico',
    goal='''Aplique t√©cnicas de processamento de linguagem para avaliar o estilo textual,
    verificando uso excessivo de adjetivos, linguagem alarmista e clickbait, identificar o
    idioma e fazer a tradu√ß√£o para o portugu√™s Brasil, aplicar a avalia√ß√£o textual no texto.''',
    verbose=True,
    memory=True,
    llm=llm,
    backstory='Voc√™ √© um agente lingu√≠stico experiente, que avalia a qualidade textual'
)

# Define a tarefa do agente lingu√≠stico
tarefa_linguistica = Task(
    description="Analisar o texto e avaliar o estilo textual atrav√©s dos par√¢metros definidos no agente.",
    expected_output='''Relat√≥rio de texto revisado, com linguagem adequada, sem exageros e" \
    traduzido para o portugu√™s Brasil, se for realmente necess√°rio.''',
    agent=agente_linguistico,
    input="coleta_de_fontes.md",
    output_file="linguistica.md"
)

# ---------------------- AGENTE 3: VERIFICADOR DE FATOS ----------------------
# Define o agente verificador de fatos
agente_verificador = Agent(
    role='Verificador de fatos',
    goal='''Voc√™ √© um verificador de fatos e precisa analisar as fontes coletadas pelo agente 
    coletor, verificando a veracidade das informa√ß√µes e a confiabilidade das fontes.''',
    verbose=True,
    memory=True,
    llm=llm,
    backstory='''Voc√™ √© um especialista de fact-checking, que analisa a veracidade das informa√ß√µes coletadas
    e confirma a confiabilidade das fontes.'''
)

# Define a tarefa do verificador
tarefa_verificacao = Task(
    description="Analisar as fontes coletadas pelo agente coletor, verificando a veracidade das informa√ß√µes.",
    expected_output='''Relat√≥rio de verifica√ß√£o de fatos, com an√°lise da veracidade das informa√ß√µes 
    e confiabilidade das fontes.''',
    agent=agente_verificador,
    input="linguistica.md",
    output_file="verificacao.md"
)

# ---------------------- EXECU√á√ÉO DA CREW PRINCIPAL ----------------------
# Define o processo com os tr√™s primeiros agentes
crew = Crew(
    agents=[agente_coletor, agente_linguistico, agente_verificador],
    tasks=[tarefa_coletar, tarefa_linguistica, tarefa_verificacao],
    process=Process.sequential,
    llm=llm
)

# Executa o processo principal
analise1 = crew.kickoff(inputs={'noticia': noticia})

# ---------------------- MONTAGEM DO TEXTO FINAL ----------------------
# L√™ os relat√≥rios e une para classificar
with open("linguistica.md", "r", encoding="utf-8") as f1, open("verificacao.md", "r", encoding="utf-8") as f2:
    texto_final = "# Texto Jornal√≠stico Revisado\n\n" + f1.read() + "\n\n# Relat√≥rio de Verifica√ß√£o de Fatos\n\n" + f2.read()

# Escreve o arquivo de entrada para classifica√ß√£o
with open("entrada_para_classificacao.md", "w", encoding="utf-8") as f_out:
    f_out.write(texto_final)

# ---------------------- AGENTE 4: CLASSIFICADOR FINAL ----------------------
# Define o agente classificador
agente_classificador = Agent(
    role='Classificador de not√≠cias',
    goal='''Voc√™ √© um classificador de not√≠cias e precisa analisar o artigo final, 
    classificando-o como verdadeiro, falso ou duvidoso.''',
    verbose=True,
    memory=True,
    llm=llm,
    backstory='''Voc√™ √© um especialista em classifica√ß√£o de not√≠cias, que analisa o artigo final 
    e classifica como verdadeiro, falso ou duvidoso.'''
)

# Define a tarefa de classifica√ß√£o
tarefa_classificacao = Task(
    description="Analisar o artigo final e classific√°-lo como VERDADEIRO‚úÖ, FALSOü§• ou DUVIDOSOü´§.",
    expected_output='''Classifica√ß√£o do artigo final como verdadeiro, falso ou duvidoso, 
    com justificativa da classifica√ß√£o.
    D√™ uma resposta clara e objetiva,
    evitando jarg√µes t√©cnicos e explicando o racioc√≠nio por tr√°s da classifica√ß√£o.
    Leve em considera√ß√£o as regras heur√≠sticas simples que vou te passar agora: 
    se n√£o encontra correspond√™ncia e texto alarmista = FALSOü§•
    se  encontra fonte confi√°vel + texto neutro=VERDADEIRO‚úÖ
    e se encontrar apenas fontes n√£o confi√°veis ou n√£o encontrar fontes = DUVIDOSOü´§,
    leve em conta que todas as fontes citadas no agente coletor s√£o confi√°veis.
    quando for dar a resposta, fale o resultado da classifica√ß√£o e justifique a sua resposta.''',
    agent=agente_classificador,
    input="entrada_para_classificacao.md",
    output_file="classificacao_final.md"
)

# Cria nova crew para a etapa de classifica√ß√£o
crew_classificador = Crew(
    agents=[agente_classificador],
    tasks=[tarefa_classificacao],
    process=Process.sequential,
    llm=llm
)

# Executa a classifica√ß√£o
crew_classificador.kickoff()

# ---------------------- EXIBE RESULTADOS NO TERMINAL ----------------------
print('------------------------------------')
print("\n----- VERIFICA√á√ÉO DOS FATOS -----\n")
print('------------------------------------')
with open("verificacao.md", "r", encoding="utf-8") as f:
    print(f.read())

print('---------------------------------------------')
print("\n----- CLASSIFICA√á√ÉO FINAL DA NOT√çCIA -----\n")
print('---------------------------------------------')
with open("classificacao_final.md", "r", encoding="utf-8") as f:
    resultado = f.read()

# ---------------------- ARMAZENAMENTO EM BANCO ----------------------
# Reabre conex√£o
conn = sqlite3.connect("fakestop.db")
cursor = conn.cursor()

# L√™ todos os relat√≥rios
with open("coleta_de_fontes.md", "r", encoding="utf-8") as f:
    fontes = f.read()

with open("linguistica.md", "r", encoding="utf-8") as f:
    linguistica = f.read()

with open("verificacao.md", "r", encoding="utf-8") as f:
    verificacao = f.read()

with open("classificacao_final.md", "r", encoding="utf-8") as f:
    classificacao = f.read()

# Insere dados no banco
cursor.execute('''
INSERT INTO analises (noticia, fontes, analise_linguistica, verificacao_fatos, classificacao_final, data_analise)
VALUES (?, ?, ?, ?, ?, ?)
''', (
    noticia,
    fontes,
    linguistica,
    verificacao,
    classificacao,
    datetime.now().strftime("%Y-%m-%d %H:%M:%S")
))

conn.commit()
conn.close()

# Exibe classifica√ß√£o final no console
print(resultado)
