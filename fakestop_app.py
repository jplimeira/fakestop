# ---------------------- IMPORTA√á√ïES E CONFIGURA√á√ÉO ----------------------
import os
import sqlite3
import streamlit as st
from crewai import Agent, Task, Process, Crew, LLM
from dotenv import load_dotenv
from datetime import datetime

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Instancia o modelo da OpenAI (gpt-4o-mini)
llm = LLM(model='gpt-4o-mini', api_key=OPENAI_API_KEY)

# ---------------------- BANCO DE DADOS ----------------------
# Conecta ou cria o banco de dados SQLite para armazenar an√°lises
conn = sqlite3.connect("fakestop.db")
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS analises (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    noticia TEXT,
    fontes TEXT,
    analise_linguistica TEXT,
    verificacao_fatos TEXT,
    classificacao_final TEXT,
    data_analise TEXT
)
''')
conn.commit()
conn.close()

# ---------------------- INTERFACE STREAMLIT ----------------------
# Define configura√ß√µes da p√°gina
st.set_page_config(page_title="FAKESTOP", layout="wide")
st.title("üõ°Ô∏è FAKESTOP - Verificador de Not√≠cias")

# Menu lateral com abas
aba = st.sidebar.radio("Escolha uma op√ß√£o", ["üîç Analisar nova not√≠cia", "üìö Ver hist√≥rico"])

# ---------------------- AN√ÅLISE DE NOT√çCIA ----------------------
if aba == "üîç Analisar nova not√≠cia":
    noticia = st.text_area("Digite a not√≠cia que deseja verificar", height=200)

    if st.button("Analisar not√≠cia"):
        if not noticia.strip():
            st.error("Por favor, insira uma not√≠cia para analisar.")
        else:
            with st.spinner("üîé Executando an√°lise..."):

                # ---------- AGENTE 1: Coletor de Fontes ----------
                agente_coletor = Agent(
                    role='Jornalista investigativo',
                    goal='''Voc√™ √© um jornalista investigativo e precisa pesquisar fontes confi√°veis para coletar 
                    infoma√ß√µes sobre a tem√°tica {noticia} em sites como o https://g1.globo.com, https://bbc.com, 
                    https://toolbox.google.com/factcheck/explorer/search/list:recent;hl=pt.''',
                    verbose=True,
                    memory=True,
                    llm=llm,
                    backstory='Voc√™ √© um jornalista investigativo experiente sobre pesquisar not√≠cias tipo {noticia}'
                )

                tarefa_coletar = Task(
                    description=f"Pesquisa de fontes confi√°veis para coletar informa√ß√µes {noticia}.",
                    expected_output="Relat√≥rio de fontes coletadas com data, links e resumos.",
                    agent=agente_coletor,
                    output_file="coleta_de_fontes.md"
                )

                # ---------- AGENTE 2: Lingu√≠stico ----------
                # Define o agente respons√°vel pela an√°lise lingu√≠stica
                agente_linguistico = Agent(
                    role='Agente lingu√≠stico',
                    goal='''Aplique t√©cnicas de processamento de linguagem para avaliar o estilo textual,
                    verificando uso excessivo de adjetivos, linguagem alarmista e clickbait, identificar o
                    idioma e fazer a tradu√ß√£o para o portugu√™s Brasil, aplicar a avalia√ß√£o textual no texto.''',
                    verbose=True,
                    memory=True,
                    llm=llm,
                    backstory='Voc√™ √© um agente lingu√≠stico experiente, que avalia a qualidade textual'
                )   

                # Define a tarefa do agente lingu√≠stico
                tarefa_linguistica = Task(
                    description="Analisar o texto e avaliar o estilo textual atrav√©s dos par√¢metros definidos no agente.",
                    expected_output='''Relat√≥rio de texto revisado, com linguagem adequada, sem exageros e" \
                    traduzido para o portugu√™s Brasil, se for realmente necess√°rio.''',
                    agent=agente_linguistico,
                    input="coleta_de_fontes.md",
                    output_file="linguistica.md"
                )

                # ---------- AGENTE 3: Verificador de Fatos ----------
                agente_verificador = Agent(
                    role='Verificador de fatos',
                    goal='''Voc√™ √© um verificador de fatos e precisa analisar as fontes coletadas pelo agente 
                    coletor, verificando a veracidade das informa√ß√µes e a confiabilidade das fontes.''',
                    verbose=True,
                    memory=True,
                    llm=llm,
                    backstory='''Voc√™ √© um especialista de fact-checking, que analisa a veracidade das informa√ß√µes coletadas
                    e confirma a confiabilidade das fontes.'''
                )

                # Define a tarefa do verificador
                tarefa_verificacao = Task(
                    description="Analisar as fontes coletadas pelo agente coletor, verificando a veracidade das informa√ß√µes.",
                    expected_output='''Relat√≥rio de verifica√ß√£o de fatos, com an√°lise da veracidade das informa√ß√µes 
                    e confiabilidade das fontes.''',
                    agent=agente_verificador,
                    input="linguistica.md",
                    output_file="verificacao.md"
                )

                # ---------- EXECU√á√ÉO DOS AGENTES EM SEQU√äNCIA ----------
                crew = Crew(
                    agents=[agente_coletor, agente_linguistico, agente_verificador],
                    tasks=[tarefa_coletar, tarefa_linguistica, tarefa_verificacao],
                    process=Process.sequential,
                    llm=llm
                )
                crew.kickoff(inputs={"noticia": noticia})

                # ---------- CLASSIFICA√á√ÉO FINAL ----------
                with open("linguistica.md", "r", encoding="utf-8") as f1, open("verificacao.md", "r", encoding="utf-8") as f2:
                    texto_final = "# Texto Jornal√≠stico Revisado\n\n" + f1.read() + "\n\n# Relat√≥rio de Verifica√ß√£o de Fatos\n\n" + f2.read()

                with open("entrada_para_classificacao.md", "w", encoding="utf-8") as f_out:
                    f_out.write(texto_final)

                # ---------- AGENTE 4: Classificador ----------

                # Define o agente classificador
                agente_classificador = Agent(
                    role='Classificador de not√≠cias',
                    goal='''Voc√™ √© um classificador de not√≠cias e precisa analisar o artigo final, 
                    classificando-o como verdadeiro, falso ou duvidoso.''',
                    verbose=True,
                    memory=True,
                    llm=llm,
                    backstory='''Voc√™ √© um especialista em classifica√ß√£o de not√≠cias, que analisa o artigo final 
                    e classifica como verdadeiro, falso ou duvidoso.'''
                )

                # Define a tarefa de classifica√ß√£o
                tarefa_classificacao = Task(
                    description="Analisar o artigo final e classific√°-lo como VERDADEIRO‚úÖ, FALSOü§• ou DUVIDOSOü´§.",
                    expected_output='''Classifica√ß√£o do artigo final como verdadeiro, falso ou duvidoso, 
                    com justificativa da classifica√ß√£o.
                    D√™ uma resposta clara e objetiva,
                    evitando jarg√µes t√©cnicos e explicando o racioc√≠nio por tr√°s da classifica√ß√£o.
                    Leve em considera√ß√£o as regras heur√≠sticas simples que vou te passar agora: 
                    se n√£o encontra correspond√™ncia e texto alarmista = FALSOü§•
                    se  encontra fonte confi√°vel + texto neutro=VERDADEIRO‚úÖ
                    e se encontrar apenas fontes n√£o confi√°veis ou n√£o encontrar fontes = DUVIDOSOü´§,
                    leve em conta que todas as fontes citadas no agente coletor s√£o confi√°veis.
                    quando for dar a resposta, fale o resultado da classifica√ß√£o e justifique a sua resposta.''',
                    agent=agente_classificador,
                    input="entrada_para_classificacao.md",
                    output_file="classificacao_final.md"
                )

                crew_classificador = Crew(
                    agents=[agente_classificador],
                    tasks=[tarefa_classificacao],
                    process=Process.sequential,
                    llm=llm
                )
                crew_classificador.kickoff()

                # ---------- LEITURA E ARMAZENAMENTO NO BANCO ----------
                with open("coleta_de_fontes.md", "r", encoding="utf-8") as f: fontes = f.read()
                with open("linguistica.md", "r", encoding="utf-8") as f: linguistica = f.read()
                with open("verificacao.md", "r", encoding="utf-8") as f: verificacao = f.read()
                with open("classificacao_final.md", "r", encoding="utf-8") as f: classificacao = f.read()

                conn = sqlite3.connect("fakestop.db")
                cursor = conn.cursor()
                cursor.execute('''
                INSERT INTO analises (noticia, fontes, analise_linguistica, verificacao_fatos, classificacao_final, data_analise)
                VALUES (?, ?, ?, ?, ?, ?)
                ''', (
                    noticia, fontes, linguistica, verificacao, classificacao,
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                ))
                conn.commit()
                conn.close()

                st.success("‚úÖ An√°lise conclu√≠da com sucesso!")

                # ---------- EXIBI√á√ÉO DOS RESULTADOS ----------
                st.subheader("üìå Classifica√ß√£o Final")
                st.markdown(classificacao)

                with st.expander("üìÇ Fontes Coletadas"):
                    st.markdown(fontes)

                with st.expander("üìù An√°lise Lingu√≠stica"):
                    st.markdown(linguistica)

                with st.expander("üîé Verifica√ß√£o de Fatos"):
                    st.markdown(verificacao)

# ---------------------- ABA DE HIST√ìRICO ----------------------
elif aba == "üìö Ver hist√≥rico":
    conn = sqlite3.connect("fakestop.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, noticia, data_analise FROM analises ORDER BY id DESC")
    registros = cursor.fetchall()

    if not registros:
        st.info("Nenhuma an√°lise realizada ainda.")
    else:
        for id_, noticia, data in registros:
            with st.expander(f"üì∞ {noticia[:80]}... ({data})"):
                cursor.execute("SELECT fontes, analise_linguistica, verificacao_fatos, classificacao_final FROM analises WHERE id=?", (id_,))
                fontes, linguistica, verificacao, classificacao = cursor.fetchone()

                st.subheader("üìå Classifica√ß√£o Final")
                st.markdown(classificacao)

                with st.markdown("üìÇ Fontes Coletadas"):
                    st.markdown(fontes)

                with st.markdown("üìù An√°lise Lingu√≠stica"):
                    st.markdown(linguistica)

                with st.markdown("üîé Verifica√ß√£o de Fatos"):
                    st.markdown(verificacao)

    conn.close()
